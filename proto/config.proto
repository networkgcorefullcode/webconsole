syntax = "proto3";
package sdcoreConfig;
option go_package = "./sdcoreConfig";

service ConfigService {
  // Update one or more entities on the target.
  rpc Write(WriteRequest) returns (WriteResponse) {
  }
  // Read one or more P4 entities from the target.
  rpc Read(ReadRequest) returns (ReadResponse) {
  }
}

enum Status {
  SUCCESS = 0;
  FAILURE = 1;
}

message PlmnId {
  string mcc = 1;
  string mnc = 2;
}

message NSSAI {
  string sst = 1;
  string sd = 2;
}

message SupportedPlmnList {
  repeated PlmnId plmnIds = 1; 
}

message SupportedNssaiList {
  repeated NSSAI nssai = 1; 
}

message SupportedNssaiInPlmnList {
    PlmnId plmn = 1;
    SupportedNssaiList snssaiList = 2;
}

message Config {
  string version = 1;
  SupportedPlmnList suppPlmnList = 2;
  SupportedNssaiInPlmnList suppNssaiInPlmnList = 3;
}

message QoS {
    uint32  uplink = 1;
    uint32  downlink = 2;
    string  trafficClass = 3;
}

message gNodeB {
    string      name = 1;
    uint32      tac  = 2;
}

message UpfInfo {
    string      upfName = 1; 
    uint32      upfPort = 2;
}

message SiteInfo {
    string      siteName = 1;
    gNodeB      gnb = 2;
    PlmnId      plmn = 3;
    UpfInfo     upf  = 4;
}

message AppInfo {
    string appName = 1;
    uint32 startport = 2;
    uint32 endport = 3;
    uint32 protocol = 4;
    string endPoint = 5;
}

message NetworkSlice {
    string name = 1;
    NSSAI nssai = 2; 
    QoS   qos   = 3;
    repeated string deviceGroups = 4;
    SiteInfo site = 5;
    repeated string denyApps = 6;
    repeated string permitApps = 7;
    repeated AppInfo appInfo = 8;
}

message WriteRequest {
    Config writeConfig = 1;
}

message WriteResponse {
    Status writeStatus = 1;
}

message ReadRequest {
    string version = 1;
}

message ReadResponse {
    Config readConfig = 1;
}
